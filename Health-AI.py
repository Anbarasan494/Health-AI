# -*- coding: utf-8 -*-
"""HealthAI(v3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15QOLKu2Ky_6WOUznI15ld9_nzcG72b9N
"""

# ================================================================
# SIMPLE MEDICAL AI ASSISTANT FOR GOOGLE COLAB
# ================================================================
# Run this entire cell in Google Colab

# Install required packages
print("🔧 Installing required packages...")
!pip install -q gradio

print("✅ Installation complete!")

# Import libraries
import gradio as gr
import random
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

print("📚 Libraries loaded successfully!")

# ================================================================
# MEDICAL KNOWLEDGE BASE (Lightweight & Rule-based)
# ================================================================

SYMPTOM_CONDITIONS = {
    "fever": ["Common cold", "Flu", "Viral infection", "Bacterial infection"],
    "headache": ["Tension headache", "Migraine", "Dehydration", "Stress", "Sinus pressure"],
    "cough": ["Common cold", "Bronchitis", "Allergies", "Throat irritation"],
    "chest pain": ["Muscle strain", "Heartburn", "Anxiety", "Costochondritis"],
    "stomach pain": ["Indigestion", "Gastritis", "Food poisoning", "Stress"],
    "fatigue": ["Lack of sleep", "Stress", "Dehydration", "Poor nutrition"],
    "dizziness": ["Low blood pressure", "Dehydration", "Inner ear issue", "Low blood sugar"],
    "nausea": ["Food poisoning", "Motion sickness", "Stress", "Medication side effect"],
    "sore throat": ["Viral infection", "Bacterial infection", "Allergies", "Dry air"],
    "back pain": ["Muscle strain", "Poor posture", "Herniated disc", "Stress tension"]
}

EMERGENCY_KEYWORDS = [
    "severe chest pain", "chest pressure", "difficulty breathing", "can't breathe",
    "unconscious", "seizure", "severe bleeding", "stroke", "heart attack",
    "severe allergic reaction", "anaphylaxis", "severe abdominal pain",
    "high fever", "temperature above 103", "severe headache", "vision loss",
    "severe burn", "broken bone", "head injury", "overdose"
]

FIRST_AID_ADVICE = {
    "fever": "🌡️ Rest, drink plenty of fluids, use acetaminophen/ibuprofen as directed. Seek care if >101.5°F (38.6°C) or lasts >3 days",
    "headache": "💆 Rest in quiet, dark room. Stay hydrated. Gentle head/neck massage. Avoid triggers like bright lights",
    "cough": "💧 Stay hydrated, use humidifier, honey for throat soothing. Avoid smoke and irritants",
    "chest pain": "🫁 Sit upright, breathe slowly and deeply. If severe, crushing, or radiating - seek immediate care",
    "stomach pain": "🍽️ Eat bland foods (BRAT diet), stay hydrated, avoid dairy/spicy foods. Rest and monitor",
    "fatigue": "😴 Ensure 7-9 hours sleep, manage stress, eat balanced meals, stay hydrated",
    "dizziness": "🪑 Sit down immediately, drink water, avoid sudden movements. Rest until it passes",
    "nausea": "🤢 Sip clear fluids, try ginger, eat bland foods, rest. Avoid strong smells",
    "sore throat": "🍯 Gargle warm salt water, use throat lozenges, stay hydrated, rest voice",
    "back pain": "🧘 Apply ice/heat, gentle stretching, maintain good posture, avoid heavy lifting"
}

HEALTH_TIPS = {
    "blood pressure": "Monitor regularly, reduce sodium, exercise moderately, manage stress, maintain healthy weight",
    "weight": "Balanced diet with portion control, regular physical activity, adequate sleep, stay hydrated",
    "blood sugar": "Monitor carbohydrate intake, eat regular meals, exercise regularly, take medications as prescribed",
    "cholesterol": "Heart-healthy diet, reduce saturated fats, increase fiber, exercise regularly, avoid smoking",
    "heart rate": "Regular cardio exercise, manage stress, avoid excessive caffeine, maintain healthy weight"
}

# ================================================================
# CORE FUNCTIONS
# ================================================================

def analyze_symptoms(symptoms, severity, duration):
    """Analyze symptoms using rule-based logic"""

    if not symptoms or symptoms.strip() == "":
        return "Please describe your symptoms to get an analysis.", "NO DATA"

    symptoms_lower = symptoms.lower().strip()

    # Emergency check first
    is_emergency = any(keyword in symptoms_lower for keyword in EMERGENCY_KEYWORDS)

    if is_emergency or severity >= 9:
        return """🚨 EMERGENCY ALERT 🚨

⚠️ This may require IMMEDIATE medical attention!

🆘 CALL EMERGENCY SERVICES NOW:
• US/Canada: 911
• UK: 999
• India: 108
• Australia: 000

🚑 DO NOT DELAY:
• Do not drive yourself
• Have someone accompany you
• Bring medications list
• Go to nearest emergency room

Time-sensitive situation detected.""", "🚨 EMERGENCY"

    # Find matching symptoms and conditions
    possible_conditions = []
    matched_symptoms = []
    advice_list = []

    for symptom, conditions in SYMPTOM_CONDITIONS.items():
        if symptom in symptoms_lower:
            possible_conditions.extend(conditions)
            matched_symptoms.append(symptom)
            if symptom in FIRST_AID_ADVICE:
                advice_list.append(f"{FIRST_AID_ADVICE[symptom]}")

    # Risk assessment
    if severity >= 8:
        risk = "HIGH"
        urgency = "Seek medical attention today"
    elif severity >= 6:
        risk = "MODERATE"
        urgency = "Consider seeing healthcare provider within 24-48 hours"
    elif severity >= 4:
        risk = "MILD-MODERATE"
        urgency = "Monitor symptoms, see provider if worsening"
    else:
        risk = "MILD"
        urgency = "Self-care measures, monitor progress"

    # Duration factor
    duration_advice = ""
    if "week" in duration.lower() or "weeks" in duration.lower():
        duration_advice = "⏰ Chronic symptoms (>1 week) should be evaluated by healthcare provider."
        if risk == "MILD":
            risk = "MODERATE"

    # Generate comprehensive response
    if not possible_conditions:
        possible_conditions = ["General discomfort", "Non-specific symptoms"]

    # Remove duplicates and format
    unique_conditions = list(set(possible_conditions))

    result = f"""📊 SYMPTOM ANALYSIS REPORT

🔍 **Symptoms Analyzed:** {', '.join(matched_symptoms) if matched_symptoms else 'General symptoms'}

⚠️ **Risk Level:** {risk}
📋 **Recommendation:** {urgency}

🏥 **Possible Conditions:**
{', '.join(unique_conditions[:4])}  # Limit to top 4

💡 **Self-Care Recommendations:**
{chr(10).join(['• ' + advice for advice in advice_list[:3]])}  # Top 3 advice

{duration_advice}

📞 **When to Seek Immediate Care:**
• Symptoms suddenly worsen
• Severe pain (8+/10)
• Difficulty breathing
• High fever >101.5°F (38.6°C)
• Persistent vomiting
• Signs of dehydration

📅 **Follow-up:**
• Monitor symptoms for 24-48 hours
• Keep symptom diary
• Contact healthcare provider if no improvement

⚠️ **DISCLAIMER:** This analysis is for informational purposes only. Always consult qualified healthcare professionals for proper diagnosis and treatment."""

    return result, f"🔴 {risk} RISK"

def track_health_metric(metric, current_value, target_value):
    """Simple health metric tracking"""

    try:
        current = float(current_value)
        target = float(target_value)

        # Calculate progress and direction
        if abs(current - target) < 0.01:
            progress_status = "🎯 At target!"
            progress_pct = 100.0
        elif target > current:
            progress_pct = min(100, (current / target) * 100)
            progress_status = f"📈 {progress_pct:.1f}% towards target"
        else:
            progress_pct = min(100, (target / current) * 100)
            progress_status = f"📉 Need to reduce by {abs(current-target):.1f} units"

        # Get specific advice
        metric_lower = metric.lower()
        advice = HEALTH_TIPS.get(metric_lower, "Follow your healthcare provider's recommendations")

        # Generate ranges for context
        normal_ranges = {
            "blood pressure": "Normal: <120/80 mmHg, Pre-high: 120-139/80-89, High: ≥140/90",
            "blood sugar": "Normal fasting: 70-100 mg/dL, Pre-diabetes: 100-125, Diabetes: ≥126",
            "cholesterol": "Desirable: <200 mg/dL, Borderline: 200-239, High: ≥240",
            "weight": "BMI: Underweight <18.5, Normal 18.5-24.9, Overweight 25-29.9, Obese ≥30",
            "heart rate": "Resting: 60-100 bpm, Athletic: 40-60 bpm, Elderly: 60-100 bpm"
        }

        range_info = normal_ranges.get(metric_lower, "Consult healthcare provider for target ranges")

        result = f"""📈 HEALTH TRACKING REPORT

📊 **Metric:** {metric}
📍 **Current Value:** {current}
🎯 **Target Value:** {target}
📋 **Status:** {progress_status}

📏 **Reference Ranges:**
{range_info}

💡 **Personalized Recommendations:**
{advice}

📅 **Monitoring Schedule:**
• Daily tracking for 2 weeks
• Weekly averages thereafter
• Monthly review with healthcare provider
• Document any significant changes

⚡ **Quick Tips:**
• Track at same time daily
• Use reliable measuring tools
• Note factors affecting readings
• Share trends with your doctor

📱 **Digital Tools:**
Consider using health apps or devices for consistent tracking

⚠️ **Important:** Individual targets may vary. Consult your healthcare provider for personalized goals and monitoring frequency."""

        return result

    except (ValueError, TypeError):
        return "❌ Please enter valid numbers for current and target values."

def medical_qa_chat(question, history):
    """Handle medical Q&A with expanded knowledge"""

    if not question or question.strip() == "":
        return "", history

    question_lower = question.lower().strip()

    # Expanded response database
    qa_responses = {
        # Symptoms
        "headache": "🤕 Headaches can result from tension, dehydration, stress, lack of sleep, eye strain, or sinus issues. Try: rest in dark room, hydrate, gentle massage, cold/warm compress. See doctor if severe, sudden, or with fever/vision changes.",

        "fever": "🌡️ Fever indicates your body is fighting infection. Management: rest, fluids, acetaminophen/ibuprofen as directed. Seek care if: >101.5°F (38.6°C), lasts >3 days, with severe symptoms, or in infants <3 months.",

        "cough": "😷 Coughs can be from colds, allergies, infections, or irritants. Help: stay hydrated, humidifier, honey (not for babies <1yr), avoid smoke. See doctor if: blood in sputum, lasts >3 weeks, with fever/weight loss.",

        "stomach": "🤢 Stomach pain causes: food issues, stress, infections, medications. Try: BRAT diet, clear fluids, rest, heat pad. Emergency if: severe pain, blood in stool/vomit, signs of appendicitis, dehydration.",

        # General health
        "diet": "🥗 Healthy eating: variety of fruits/vegetables, whole grains, lean proteins, healthy fats. Limit: processed foods, added sugars, excessive sodium. Stay hydrated. Consider consulting registered dietitian for personalized plans.",

        "exercise": "🏃‍♂️ Adults need 150 mins moderate activity weekly. Start gradually, choose enjoyable activities, include strength training 2x/week. Listen to your body, warm up/cool down. Consult doctor before starting intense programs.",

        "sleep": "😴 Adults need 7-9 hours nightly. Good habits: consistent schedule, cool/dark/quiet room, avoid screens 1hr before bed, limit caffeine after 2pm, relaxing bedtime routine.",

        # Specific conditions
        "diabetes": "🩸 Diabetes management: monitor blood sugar, take medications as prescribed, healthy diet, regular exercise, foot care, eye exams. Work closely with healthcare team for optimal control.",

        "hypertension": "💓 High blood pressure management: limit sodium, maintain healthy weight, exercise regularly, limit alcohol, manage stress, take medications as prescribed, regular monitoring.",

        "anxiety": "😰 Anxiety management: deep breathing, regular exercise, adequate sleep, limit caffeine, mindfulness/meditation, talk therapy, support groups. Seek professional help if interfering with daily life.",

        # Prevention
        "vaccine": "💉 Vaccines are safe, effective prevention tools. Stay current with recommended schedules. Common adult vaccines: flu (annual), COVID-19, tetanus/diphtheria (every 10 years). Consult healthcare provider.",

        "checkup": "🏥 Regular checkups help catch issues early. Adults should see primary care provider annually. Include: vital signs, lab work, screenings based on age/risk factors, preventive counseling."
    }

    # Find relevant response
    response = None
    for keyword, answer in qa_responses.items():
        if keyword in question_lower:
            response = answer
            break

    # Default response for unmatched questions
    if not response:
        response = """💭 I understand you have a health question. Here's general guidance:

🔍 **For Specific Symptoms:**
• Note severity, duration, associated symptoms
• Monitor changes over time
• Consider what might have triggered them

🏥 **When to Seek Care:**
• Severe or persistent symptoms
• Symptoms interfering with daily activities
• New or concerning changes
• Emergency warning signs

🌟 **General Health:**
• Balanced diet and regular exercise
• Adequate sleep (7-9 hours)
• Stress management
• Preventive care and screenings

For more specific guidance, please describe your symptoms or health concerns in detail."""

    # Add timestamp and disclaimer
    timestamp = datetime.now().strftime("%H:%M")
    full_response = f"[{timestamp}] {response}\n\n⚠️ **Medical Disclaimer:** This information is for educational purposes only. Always consult qualified healthcare professionals for medical advice, diagnosis, and treatment."

    # Use new message format
    history.append({"role": "user", "content": question})
    history.append({"role": "assistant", "content": full_response})

    return "", history

def emergency_assessment(symptoms):
    """Quick emergency screening"""

    if not symptoms or symptoms.strip() == "":
        return "Please describe your symptoms for emergency assessment.", "❌ NO INPUT"

    symptoms_lower = symptoms.lower().strip()

    # Check for emergency keywords
    emergency_found = []
    for keyword in EMERGENCY_KEYWORDS:
        if keyword in symptoms_lower:
            emergency_found.append(keyword)

    if emergency_found:
        return f"""🚨 POTENTIAL EMERGENCY DETECTED 🚨

⚠️ **Emergency indicators found:** {', '.join(emergency_found)}

🆘 **CALL EMERGENCY SERVICES IMMEDIATELY:**
• 🇺🇸 US/Canada: 911
• 🇬🇧 UK: 999
• 🇮🇳 India: 108
• 🇦🇺 Australia: 000
• 🇪🇺 Europe: 112

🚑 **IMMEDIATE ACTIONS:**
1. Call emergency services NOW
2. Do NOT drive yourself
3. Have someone stay with you
4. Bring medication list if possible
5. Go to nearest emergency room

⏰ **Time is critical** - do not delay seeking medical care.

If this is a mistake, please clarify your symptoms. When in doubt, always err on the side of caution.""", "🚨 CALL 911 NOW"

    else:
        return """✅ **No immediate emergency indicators detected**

However, trust your instincts about your health:

🏥 **Seek immediate care if:**
• Symptoms suddenly worsen
• Severe pain or discomfort
• Difficulty breathing
• Chest pain or pressure
• Severe allergic reaction
• High fever with confusion
• Significant bleeding
• Head injury with confusion

📞 **Non-emergency options:**
• Contact your primary care provider
• Visit urgent care center
• Call nurse hotline if available
• Telehealth consultation

⚠️ **Remember:** This tool cannot replace medical judgment. If you feel something is seriously wrong, seek immediate medical attention.""", "ℹ️ MONITOR & SEEK CARE IF NEEDED"

# ================================================================
# GRADIO INTERFACE FOR GOOGLE COLAB
# ================================================================

def create_medical_app():
    """Create the Gradio interface optimized for Colab"""

    # Custom CSS for Colab
    custom_css = """
    .gradio-container {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
    }
    .gr-form {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: 15px;
        padding: 20px;
        margin: 10px;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.18);
    }
    .gr-button-primary {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        border: none !important;
        border-radius: 25px !important;
        color: white !important;
        font-weight: 600 !important;
        transition: all 0.3s ease !important;
    }
    .gr-button-primary:hover {
        transform: translateY(-2px) !important;
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.3) !important;
    }
    """

    with gr.Blocks(
        title="🏥 Medical AI Assistant",
        theme=gr.themes.Soft(),
        css=custom_css
    ) as app:

        # Header
        gr.HTML("""
        <div style="text-align: center; padding: 25px; background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); border-radius: 15px; margin-bottom: 20px; border: 1px solid rgba(255, 255, 255, 0.18);">
            <h1 style="color: white; font-size: 2.5em; margin: 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3);">
                🏥 Medical AI Assistant
            </h1>
            <p style="color: rgba(255,255,255,0.9); font-size: 1.1em; margin: 10px 0;">
                💡 Intelligent Health Guidance & Quick Medical Information
            </p>
            <div style="background: linear-gradient(45deg, #ff6b6b, #ee5a52); border-radius: 10px; padding: 15px; margin-top: 15px;">
                <strong style="color: white;">⚠️ IMPORTANT MEDICAL DISCLAIMER</strong><br>
                <span style="color: rgba(255,255,255,0.95); font-size: 0.9em;">This AI provides educational information only. Always consult qualified healthcare professionals for medical advice, diagnosis, and treatment decisions.</span>
            </div>
        </div>
        """)

        # Main Interface Tabs
        with gr.Tab("🔍 Symptom Checker", elem_classes="gr-form"):
            gr.Markdown("### 📋 Comprehensive Symptom Analysis")
            gr.Markdown("*Get quick insights about your symptoms and appropriate next steps*")

            with gr.Row():
                with gr.Column(scale=2):
                    symptoms_input = gr.Textbox(
                        label="📝 Describe Your Symptoms",
                        placeholder="Example: I have a persistent headache with nausea for 2 days, feeling dizzy...",
                        lines=4,
                        info="Be as specific as possible about what you're experiencing"
                    )

                    with gr.Row():
                        severity_slider = gr.Slider(
                            label="🌡️ Pain/Discomfort Level",
                            minimum=1,
                            maximum=10,
                            value=5,
                            info="1 = Very mild, 10 = Unbearable"
                        )

                        duration_dropdown = gr.Dropdown(
                            choices=[
                                "Less than 1 day",
                                "1-2 days",
                                "3-7 days",
                                "1-2 weeks",
                                "More than 2 weeks"
                            ],
                            label="⏰ How Long?",
                            value="1-2 days",
                            info="Duration of symptoms"
                        )

                    analyze_button = gr.Button(
                        "🔍 Analyze My Symptoms",
                        variant="primary",
                        size="lg"
                    )

                with gr.Column(scale=1):
                    risk_status = gr.Textbox(
                        label="⚠️ Risk Assessment",
                        lines=1,
                        max_lines=1
                    )

            analysis_output = gr.Textbox(
                label="📊 Detailed Analysis & Recommendations",
                lines=15,
                show_copy_button=True,
                info="Save or share this analysis with your healthcare provider"
            )

            analyze_button.click(
                fn=analyze_symptoms,
                inputs=[symptoms_input, severity_slider, duration_dropdown],
                outputs=[analysis_output, risk_status]
            )

        with gr.Tab("📈 Health Tracker", elem_classes="gr-form"):
            gr.Markdown("### 📊 Personal Health Metrics Monitoring")
            gr.Markdown("*Track your progress toward health goals*")

            with gr.Row():
                metric_dropdown = gr.Dropdown(
                    choices=[
                        "Blood Pressure",
                        "Blood Sugar",
                        "Weight",
                        "Cholesterol",
                        "Heart Rate"
                    ],
                    label="📊 Health Metric to Track",
                    value="Blood Pressure",
                    info="Select the health metric you want to monitor"
                )

                current_number = gr.Number(
                    label="📍 Current Value",
                    value=140,
                    info="Your most recent measurement"
                )

                target_number = gr.Number(
                    label="🎯 Target Value",
                    value=120,
                    info="Your goal or doctor-recommended target"
                )

            track_button = gr.Button(
                "📈 Generate Health Report",
                variant="primary",
                size="lg"
            )

            tracking_output = gr.Textbox(
                label="📋 Personalized Health Tracking Report",
                lines=12,
                show_copy_button=True,
                info="Share this report with your healthcare team"
            )

            track_button.click(
                fn=track_health_metric,
                inputs=[metric_dropdown, current_number, target_number],
                outputs=[tracking_output]
            )

        with gr.Tab("🚨 Emergency Check", elem_classes="gr-form"):
            gr.Markdown("### ⚡ Rapid Emergency Symptom Screening")
            gr.Markdown("*Quick assessment for symptoms that may need immediate medical attention*")

            gr.HTML("""
            <div style="background: linear-gradient(45deg, #ff4757, #ff3742); color: white; padding: 15px; border-radius: 10px; margin-bottom: 20px; text-align: center;">
                <strong>🚨 FOR TRUE EMERGENCIES: CALL 911 (US), 999 (UK), 108 (India) IMMEDIATELY</strong>
            </div>
            """)

            emergency_input = gr.Textbox(
                label="🆘 Describe Emergency Symptoms",
                placeholder="Example: Severe chest pain, difficulty breathing, severe bleeding...",
                lines=4,
                info="Describe any urgent symptoms you're experiencing"
            )

            emergency_button = gr.Button(
                "🚨 Emergency Assessment",
                variant="stop",
                size="lg"
            )

            with gr.Row():
                emergency_result = gr.Textbox(
                    label="🆘 Emergency Assessment Result",
                    lines=10,
                    show_copy_button=True
                )

                emergency_status = gr.Textbox(
                    label="📋 Priority Status",
                    lines=2,
                    max_lines=2
                )

            emergency_button.click(
                fn=emergency_assessment,
                inputs=[emergency_input],
                outputs=[emergency_result, emergency_status]
            )

        with gr.Tab("💬 Health Q&A", elem_classes="gr-form"):
            gr.Markdown("### 🤖 Interactive Medical Information Assistant")
            gr.Markdown("*Ask questions about health topics, symptoms, and general medical information*")

            chatbot_interface = gr.Chatbot(
                label="💬 Medical Information Assistant",
                height=450,
                type="messages",
                placeholder="Ask me about health topics, symptoms, or general medical questions...",
                show_copy_button=True
            )

            with gr.Row():
                message_input = gr.Textbox(
                    label="💭 Your Health Question",
                    placeholder="Ask about symptoms, health tips, conditions, prevention...",
                    scale=4,
                    info="Type your question and press Enter or click Send"
                )

                send_button = gr.Button(
                    "📤 Send",
                    variant="primary",
                    scale=1
                )

            # Example questions
            gr.HTML("""
            <div style="margin-top: 15px; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px;">
                <strong>💡 Try asking about:</strong><br>
                • "What should I do for a headache?"<br>
                • "How can I lower my blood pressure?"<br>
                • "What are signs of diabetes?"<br>
                • "How much exercise do I need?"<br>
                • "What foods are good for heart health?"
            </div>
            """)

            message_input.submit(
                fn=medical_qa_chat,
                inputs=[message_input, chatbot_interface],
                outputs=[message_input, chatbot_interface]
            )

            send_button.click(
                fn=medical_qa_chat,
                inputs=[message_input, chatbot_interface],
                outputs=[message_input, chatbot_interface]
            )

        # Footer with additional information
        gr.HTML("""
        <div style="text-align: center; margin-top: 25px; padding: 20px; background: rgba(255,255,255,0.1); border-radius: 15px; backdrop-filter: blur(10px);">
            <h3 style="color: white; margin: 0 0 10px 0;">🔬 Powered by Lightweight AI Technology</h3>
            <p style="color: rgba(255,255,255,0.9); margin: 0; line-height: 1.6;">
                This tool uses rule-based medical knowledge to provide quick health guidance.<br>
                <strong>Remember:</strong> AI cannot replace professional medical consultation.<br>
                <em>Always seek qualified medical advice for health concerns.</em>
            </p>
            <div style="margin-top: 15px; font-size: 0.9em; color: rgba(255,255,255,0.8);">
                ⚡ Optimized for Google Colab | 🚀 Fast & Lightweight | 🔒 No Personal Data Stored
            </div>
        </div>
        """)

    return app

# ================================================================
# LAUNCH APPLICATION
# ================================================================

print("🚀 Creating Medical AI Assistant...")

# Create and launch the app
medical_app = create_medical_app()

print("✅ App created successfully!")
print("🌐 Launching application...")

# Launch with Colab-optimized settings
medical_app.launch(
    share=True,          # Creates public link for sharing
    debug=False,         # Cleaner output in Colab
    server_port=None,    # Auto-select available port
    quiet=False,         # Show launch messages
    show_error=True,     # Display errors for debugging
    height=800,          # Optimal height for Colab
    width="100%"         # Full width in Colab
)

print("🎉 Medical AI Assistant is now running!")
print("📱 Use the public link to access from any device")
print("💡 The app will stay active as long as this Colab session is running")